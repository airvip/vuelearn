UI组件
    别人提供好的一堆东西

    目的：为了提高开发效率

    原则：拿过来直接使用

bootstrap：简洁、大方

elementUI

MiniUI
--------------------------------------------------------------

bootstrap-demo

1、初始化，创建一个基于 webpack-simple 模板的新项目
$ vue init webpack-simple bootstrap-demo

2、进入项目
$ cd bootstrap-demo/

3、安装依赖
$ npm install

4、启动项目
$ npm run dev
如果报了默认端口 8080 被占用，可以将 package.json 文件中的
"dev": "cross-env NODE_ENV=development webpack-dev-server --open --hot",
修改为
"dev": "cross-env NODE_ENV=development webpack-dev-server --open --hot --port 8088",

5、使用 bower 安装 bootstrap,有点直接把jquery依赖一同安装
$ bower install bootstrap

-------------------------------------------------------------

element-demo

1、初始化，创建一个基于 webpack-simple 模板的新项目
$ vue init webpack-simple element-demo

2、进入项目
$ cd element-demo/

3、安装依赖
$ npm install

4、启动项目
$ npm run dev
如果报了默认端口 8080 被占用，可以将 package.json 文件中的
"dev": "cross-env NODE_ENV=development webpack-dev-server --open --hot",
修改为
"dev": "cross-env NODE_ENV=development webpack-dev-server --open --hot --port 8088"

5、安装 element-ui
$ npm i element-ui -D
npm i element-ui -D 等价于  npm install element-ui --save-dev
i    ->  install
-D   ->  --save-dev
-S   ->  --save

6、全局引入在 main.js
import ElementUI from 'element-ui'

7、引入之后就要在 main.js 中使用
Vue.use(ElementUI);

再将下面代码配置到 webpack.conf.js 中的 module.rules 中,并重新npm run dev
{
  test: /\.css$/,
  loader: 'css-loader'
}, 
{
  test: /\.(eot|woff|woff2|ttf)([\?]?.*)$/,
  loader: 'file-loader'
},

修改了 webpack 配置文件一定要重新运行才能看到效果

8、现在可以在组件中使用 element-ui 了
来个按钮 <el-button type="primary">主要按钮</el-button>

没有效果，现在就需要使用 style-loader 来解析了

9、安装 style-loader 
$ npm install style-loader --save-dev

修改 webpack.conf.js 中的

{
  test: /\.css$/,
  loader: 'css-loader'
}, 
修改为
{
  test: /\.css$/,
  loader: 'style-loader!css-loader'
}, 
再在命令行重新运行 npm run dev

10、再战 less
要想使用 less ,less 需要两个模块 less 及 less-loader
$ npm install less less-loader --save-dev

11、编写组件一定要写一个根元素


--------------------------------------------------

element-demo2  按需引入

1、初始化，创建一个基于 webpack-simple 模板的新项目
$ vue init webpack-simple element-demo2

2、进入项目
$ cd element-demo/

3、安装依赖
$ npm install

4、启动项目
$ npm run dev
如果报了默认端口 8080 被占用，可以将 package.json 文件中的
"dev": "cross-env NODE_ENV=development webpack-dev-server --open --hot",
修改为
"dev": "cross-env NODE_ENV=development webpack-dev-server --open --hot --port 8088"

5、安装 element-ui
$ npm i element-ui -D

6、安装 babel-plugin-component
$ npm install babel-plugin-component -D

7、在 .babelrc 文件修改为
{
  "presets": [
    ["env", { "modules": false }],
    "stage-3"
  ],
  "plugins": [["component", [
    {
      "libraryName": "element-ui",
      "styleLibraryName": "theme-chalk"
    }
  ]]]
}

8、在 main.js 中全局引入部分组件，例如 Button Select
import { Button, Select } from 'element-ui'

9、在 main.js 中使用组件
Vue.use(Button)
Vue.use(Select)

10、现在可能由于字体无法解析编译而报错，在 webpack.config.js 中添加
{
  test: /\.(eot|woff|woff2|ttf)([\?]?.*)$/,
  loader: 'file-loader'
},

并重新运行 npm run dev

11、现在就可以在自己编写的组件中使用 element-ui 组件了

12、使用 axios 发送请求获取数据，不再推荐使用 vue-resourse,
先安装 axios
$ npm i axios -D

-----------------------------------------------------------
mint-demo

1、初始化，创建一个基于 webpack-simple 模板的新项目
$ vue init webpack-simple mint-demo

2、进入项目
$ cd element-demo/

3、安装依赖
$ npm install

4、启动项目
$ npm run dev
如果报了默认端口 8080 被占用，可以将 package.json 文件中的
"dev": "cross-env NODE_ENV=development webpack-dev-server --open --hot",
修改为
"dev": "cross-env NODE_ENV=development webpack-dev-server --open --hot --port 8088"
